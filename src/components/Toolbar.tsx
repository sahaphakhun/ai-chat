import React from 'react'
import { useChat } from '../contexts/ChatContext'
import { StorageService } from '../utils/storage'
import { useToast } from '../contexts/ToastContext'
import { logger } from '../utils/logger'

export const Toolbar: React.FC = () => {
  const { state, actions } = useChat()
  const { push } = useToast()

  const handleNewChat = () => {
    actions.createConversation()
    logger.info('toolbar', 'р╕кр╕гр╣Йр╕▓р╕Зр╕лр╣Йр╕нр╕Зр╕кр╕Щр╕Чр╕Щр╕▓р╣Гр╕лр╕бр╣И')
  }

  const handleDeleteCurrent = () => {
    if (state.currentConversationId) {
      actions.deleteConversation(state.currentConversationId)
      logger.info('toolbar', 'р╕ер╕Ър╕лр╣Йр╕нр╕Зр╕кр╕Щр╕Чр╕Щр╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ', { id: state.currentConversationId })
    }
  }

  const handleDeleteAll = () => {
    // р╕ер╕Ър╕Чр╕╕р╕Бр╕лр╣Йр╕нр╕Зр╕кр╕Щр╕Чр╕Щр╕▓
    Object.keys(state.conversations).forEach(id => {
      actions.deleteConversation(id)
    })
    logger.info('toolbar', 'р╕ер╕Ър╕лр╣Йр╕нр╕Зр╕кр╕Щр╕Чр╕Щр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф')
    push({ type: 'success', msg: 'р╕ер╕Ър╕лр╣Йр╕нр╕Зр╕кр╕Щр╕Чр╕Щр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Бр╕ер╣Йр╕з' })
  }

  const handleExport = () => {
    try {
      StorageService.exportAsJson(state.conversations)
      push({ type: 'success', msg: 'р╕кр╣Ир╕Зр╕нр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И' })
    } catch (error) {
      logger.error('toolbar', 'р╕кр╣Ир╕Зр╕нр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Йр╕бр╣Ар╕лр╕ер╕з', { error: String(error) })
      push({ type: 'error', msg: 'р╕кр╣Ир╕Зр╕нр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Йр╕бр╣Ар╕лр╕ер╕з' })
    }
  }

  const handleImport = async (file: File) => {
    try {
      const conversations = await StorageService.importFromJson(file)
      
      // р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕лр╕бр╣И
      actions.importConversations(conversations)
      
      push({ type: 'success', msg: 'р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╣Ар╕гр╣Зр╕И' })
    } catch (error) {
      logger.error('toolbar', 'р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Йр╕бр╣Ар╕лр╕ер╕з', { error: String(error) })
      push({ type: 'error', msg: 'р╕Щр╕│р╣Ар╕Вр╣Йр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Йр╕бр╣Ар╕лр╕ер╕з' })
    }
  }

  return (
    <div className="flex items-center justify-between p-4 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700">
      {/* Left Section */}
      <div className="flex items-center space-x-3">
        <button 
          onClick={handleNewChat}
          className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-medium transition-all shadow-sm"
        >
          <span>тЮХ</span>
          <span className="hidden sm:inline">р╕лр╣Йр╕нр╕Зр╣Гр╕лр╕бр╣И</span>
        </button>

        {state.currentConversationId && (
          <button 
            onClick={handleDeleteCurrent} 
            className="flex items-center space-x-2 px-3 py-2 rounded-lg bg-orange-500 hover:bg-orange-600 text-white transition-colors shadow-sm"
            title="р╕ер╕Ър╕лр╣Йр╕нр╕Зр╕кр╕Щр╕Чр╕Щр╕▓р╕Щр╕╡р╣Й"
          >
            <span>ЁЯЧСя╕П</span>
            <span className="hidden md:inline">р╕ер╕Ър╕лр╣Йр╕нр╕Зр╕Щр╕╡р╣Й</span>
          </button>
        )}
      </div>

      {/* Right Section */}
      <div className="flex items-center space-x-2">
        <div className="hidden md:flex items-center space-x-2">
          <button 
            onClick={handleExport} 
            className="flex items-center space-x-2 px-3 py-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            title="р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е"
          >
            <span>ЁЯТ╛</span>
            <span className="hidden lg:inline">р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф</span>
          </button>

          <label className="flex items-center space-x-2 px-3 py-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 cursor-pointer transition-colors" title="р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕Вр╣Йр╕нр╕бр╕╣р╕е">
            <span>ЁЯУБ</span>
            <span className="hidden lg:inline">р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф</span>
            <input type="file" accept="application/json" className="hidden"
              onChange={e => e.target.files && handleImport(e.target.files[0])} />
          </label>

          <button 
            onClick={handleDeleteAll} 
            className="flex items-center space-x-2 px-3 py-2 rounded-lg bg-red-500 hover:bg-red-600 text-white transition-colors shadow-sm"
            title="р╕ер╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"
          >
            <span>ЁЯЧСя╕П</span>
            <span className="hidden lg:inline">р╕ер╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</span>
          </button>
        </div>

        {/* Mobile Menu */}
        <div className="md:hidden">
          <select 
            onChange={(e) => {
              const action = e.target.value
              if (action === 'export') handleExport()
              else if (action === 'deleteAll') handleDeleteAll()
              e.target.value = ''
            }}
            className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 border-0"
          >
            <option value="">тЛп</option>
            <option value="export">ЁЯТ╛ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф</option>
            <option value="deleteAll">ЁЯЧСя╕П р╕ер╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</option>
          </select>
        </div>
      </div>
    </div>
  )
}
